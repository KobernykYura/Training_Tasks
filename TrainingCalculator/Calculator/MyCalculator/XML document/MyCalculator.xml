<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCalculator</name>
    </assembly>
    <members>
        <member name="T:MyCalculator.CalculatorMethods">
            <summary>
            Represents a class for performing sum, subtraction, and multiplication operations.
            </summary>
        </member>
        <member name="M:MyCalculator.CalculatorMethods.Summation(System.Double,System.Double)">
            <summary>
            Counts the summation of two values and outputs the result of the operation.
            </summary>
            <param name="x">A double precision floating-point number.</param>
            <param name="y">A double precision floating-point number.</param>
            <returns>The number <paramref name = "x" />, summed with <paramref name = "y" />.</returns>
        </member>
        <member name="M:MyCalculator.CalculatorMethods.Subtraction(System.Double,System.Double)">
            <summary>
            Counts the subtraction of two values and outputs the result of the operation.
            </summary>
            <param name="x">A double precision floating-point number.</param>
            <param name="y">A double precision floating-point number.</param>
            <returns>The number <paramref name = "x" />, substracted with <paramref name = "y" />.</returns>
        </member>
        <member name="M:MyCalculator.CalculatorMethods.Division(System.Double,System.Double)">
            <summary>
            Counts the division of two values and outputs the result of the operation.
            </summary>
            <param name="x">A double precision floating-point number.</param>
            <param name="y">A double precision floating-point number. Can not be zero.</param>
            <returns>The number <paramref name = "x" />, divided with <paramref name = "y" />.</returns>
        </member>
        <member name="M:MyCalculator.CalculatorMethods.Multiplication(System.Double,System.Double)">
            <summary>
            Counts the multiplication of two values and outputs the result of the operation.
            </summary>
            <param name="x">A double precision floating-point number.</param>
            <param name="y">A double precision floating-point number.</param>
            <returns>The number <paramref name = "x" />, multiplicated with <paramref name = "y" />.</returns>
        </member>
        <member name="T:MyCalculator.Interfaces.IMathable`1">
            <summary>
            Interface of simple operations.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MyCalculator.Validation">
            <summary>
            Provides a method for check conversion the input <see cref="T:System.String" /> type to <see cref="T:System.Double" /> type.
            </summary>
        </member>
        <member name="M:MyCalculator.Validation.TryDouble(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="strInput">Conversion value of <see cref="T:System.String" /> type.</param>
            <param name="result">Conversion result of <see cref="T:System.Double" /> type.</param>
            <returns>True if the value of the parameter <paramref name = "strInput" /> can be converted to <see cref = "T:System.Double" /> type; otherwise, false.</returns>
        </member>
        <member name="M:MyCalculator.Validation.IsBordered(System.Double)">
            <summary>
            Returns a value of <see cref="T:System.Boolean"/> type depending on the parameter <paramref name="value"/>. 
            </summary>
            <param name="value">Parameter for check <see cref="T:System.Double"/> Min and Max borders.</param>
            <returns>Result of checking boders.</returns>
        </member>
        <member name="T:MyCalculator.View">
            <summary>
            Provides the console user interface and user input.
            </summary>
        </member>
        <member name="M:MyCalculator.View.Input(System.Int32)">
            <summary>
            The method of entering a value with the transfer of the index of the calculated value.
            </summary>
            <param name="i">Index of user's value.</param>
            <returns>Converted result of entered value in <see cref="T:System.Double"/> type.</returns>
        </member>
        <member name="M:MyCalculator.View.Menu(System.Double,System.Double)">
            <summary>
            User interaction menu and operations.
            </summary>
            <param name="x">Prarmeter of <see cref="T:System.Double" /> type. Value for calculation.</param>
            <param name="y">Prarmeter of <see cref="T:System.Double" /> type. Value for calculation.</param>
        </member>
        <member name="M:MyCalculator.View.Result(System.Double,System.String,System.Double,System.Double)">
            <summary>
            Provides result <paramref name="result"/> of <paramref name="name"/>operation.
            </summary>
            <param name="result">Prarmeter of <see cref="T:System.Double" /> type. Result of calculation.</param>
            <param name="name">Prarmeter of <see cref="T:System.String" /> type. The name of operation..</param>
            <param name="x">Prarmeter of <see cref="T:System.Double" /> type. Value for calculation.</param>
            <param name="y">Prarmeter of <see cref="T:System.Double" /> type. Value for calculation.></param>
        </member>
        <member name="T:MyCalculator.ViewLogic">
            <summary>
            Class of view logic.
            </summary>
        </member>
        <member name="M:MyCalculator.ViewLogic.SwitchCase(System.String,System.Double,System.Double,System.Double@)">
            <summary>
            Method for analysis entered operation.
            </summary>
            <param name="arg">Name of our operation. Parameter is <see cref="T:System.String"/> type.</param>
            <param name="x">Prarmeter of <see cref="T:System.Double" /> type. Value for calculation.</param>
            <param name="y">Prarmeter of <see cref="T:System.Double" /> type. Value for calculation.</param>
            <param name="mean">Output parameter of operation result.</param>
            <returns>Returns condition if entered key is good.</returns>
        </member>
        <member name="M:MyCalculator.ViewLogic.Manipulation(System.Double,System.Double,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Method of calculator action execution.
            </summary>
            <param name="x">Prarmeter of <see cref="T:System.Double" /> type. Value for calculation.</param>
            <param name="y">Prarmeter of <see cref="T:System.Double" /> type. Value for calculation.</param>
            <param name="func">Delegate <see cref="T:System.Func`3"/> accepting the method to be executed.</param>
        </member>
    </members>
</doc>
