<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Algoritms</name>
    </assembly>
    <members>
        <member name="M:Algoritms.Algoritms.BitInsertAlgoritm(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Two integer signed numbers and two positions of bits i and j 
            (i lesst than j)  are given. Implement an algorithm for inserting one number into another so that the second number occupies the position from bit j to bit i (bits are numbered from right to left).
            </summary>
            <param name="value">First value for changing bits. we change bits i this integer number.</param>
            <param name="insert">Secount integer for put it in first. <paramref name="value"/>.</param>
            <param name="left">position i.</param>
            <param name="right">position j.</param>
        </member>
        <member name="M:Algoritms.Algoritms.RecursiveAlgoritm(System.Int32[])">
            <summary>
            Implement a recursive algorithm for searching the maximum element in unsorted array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Algoritms.Algoritms.EqualSumAlgoritm(System.Int32[])">
            <summary>
            Given an array of integers. 
            Find and return an index n for which the sum of the elements 
            to the left of it is equal to the sum of the elements on the right. 
            If such an index does not return null (or -1).
            </summary>
        </member>
        <member name="M:Algoritms.Algoritms.TwoStrings(System.String,System.String)">
            <summary>
            Two strings include only characters from 'a' to 'z', 
            return a concatenated alphabetized string, excluding duplicate characters.
            </summary>
        </member>
        <member name="M:Algoritms.Algoritms.FilterLucky(System.Int32[])">
            <summary>
            Write a method FilterLucky that accepts a list of integers and
            filters the list to only include the elements that contain the digit 7. 
            For example, FilterLucky(1,2,3,4,5,6,7,68,69,70,15,17) --> { 7, 70, 17 }.
            </summary>
        </member>
        <member name="M:Algoritms.Algoritms.SetBit(System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Method for setting true1 or false0 bit.
            </summary>
            <param name="item">value where we change bit.</param>
            <param name="index">index of bit to change.</param>
            <param name="val">input true if set 1 and false if set 0.</param>
            <returns>result integer.</returns>
        </member>
        <member name="M:Algoritms.Algoritms.GetBit(System.Int32,System.Int32)">
            <summary>
            Extention method for getting bit in <paramref name="index"/> position.
            </summary>
            <param name="src">our integer where get bit at ingex.</param>
            <param name="index">position of bit.</param>
            <returns>Boolean if <paramref name="src"/> index back true or false.</returns>
        </member>
        <member name="M:Algoritms.Algoritms.Loop(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Loop of recursive algoritm.
            </summary>
            <param name="i">idex of step.</param>
            <param name="max">current maximal integer in array.</param>
            <param name="array">array for continue.</param>
            <returns>Maximal integer in array.</returns>
        </member>
        <member name="M:Algoritms.Algoritms.TryFormat(System.String)">
            <summary>
            Test of inputed strings. Strings must be only with letter format.
            </summary>
            <param name="left"></param>
        </member>
        <member name="M:Algoritms.Algoritms.ConvertMethod``2(``1[],System.Func{``1,``0})">
            <summary>
            Method for FilterLucky to create list.
            </summary>
            <typeparam name="T">convert into this type list.</typeparam>
            <typeparam name="U">convert from this type list.</typeparam>
            <param name="array">array of <typeparamref name="U"/> type.</param>
            <param name="convert">method of converting.</param>
            <returns></returns>
        </member>
    </members>
</doc>
